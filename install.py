#!/usr/bin/python2.7

import subprocess
import os


'''
Constants
'''

REPO_URL = 'https://github.com/montemishkin/config-osx'

CONFIG_DIR = os.path.expanduser('~/.montemishkin.config-osx')

CONFIG_README = os.path.join(CONFIG_DIR, 'README.txt')
CONFIG_BASHRC = os.path.join(CONFIG_DIR, '.bashrc')
CONFIG_VIMRC = os.path.join(CONFIG_DIR, '.vimrc')

USER_BASHRC = os.path.expanduser('~/.bashrc')
USER_VIMRC = os.path.expanduser('~/.vimrc')


'''
Functions
'''

def getUserValue(promptString, createCheckString):
    val = raw_input(promptString)
    valIsOk = raw_input(createCheckString(val))
    while valIsOk.lower().strip() != 'y':
        val = raw_input(promptString)
        valIsOk = raw_input(createCheckString(val))
    return val


def createAppender(commentToken, sourceKeyword, sourcePath):
    return '\n{0} From {1}\n{2} {3}'.format(
        commentToken,
        REPO_URL,
        sourceKeyword,
        sourcePath,
    )


def createHeader(commentToken):
    return '{0} This file was generated by {1}\n'.format(
        commentToken,
        REPO_URL,
    )


def appendStringToFile(string, outFilePath):
    print('appending content to {}'.format(outFilePath))
    outString = '\n{}\n'.format(string)
    try:
        with open(outFilePath, 'a') as outFile:
            outFile.write(outString)
    except IOError:
        with open(outFilePath, 'w') as outFile:
            outFile.write(outString)


def overwriteStringToFile(string, outFilePath):
    print('overwriting content to {}'.format(outFilePath))
    outString = '{}\n'.format(string)
    with open(outFilePath, 'w') as outFile:
        outFile.write(outString)


'''
Configs
'''

toUserBashrc = createAppender('#', 'source', CONFIG_BASHRC)
toUserVimrc = createAppender('"', 'source', CONFIG_VIMRC)

toConfigReadme = '''This directory was generated by {}
'''.format(REPO_URL)

toConfigVimrc = '''{header}

" allow syntax highlighting
syntax on
'''.format(header=createHeader('"'))

toConfigBashrc = '''{header}

# welcome user
echo "Welcome, I hope you are doing well."

# "list all"
#   `-A`: all except . and ..
#   `-F`: file type indicators
#   `-G`: colorized output
#   `-h`: human readable file sizes
#   `-l`: full info, one per line
alias la='ls -AFGhl'

# plays a sound
# used to alert of task completion
# e.g. `./my-long-build.py && alert`
alias alert='afplay /System/Library/Sounds/Purr.aiff'

# start a new git-lfs art project
art() {
  git clone git@github.com:montemishkin/art.git $1
  cd $1
  ./init.sh
}

# "git status"
alias gs='git status'
# "git diff"
alias gd='git diff'
# "git log"
#   `--oneline`: show short message only, one per line
#   `-n 10`: only show 10 most recent commits
alias gl='git log --oneline -n 10'
# "git graph"
#   `--oneline`: show short message only, one per line
#   `--graph`: show history in branch network graph style
#   `--all`: show commits from all branches (including those not related to current branch)
#   `-n 10`: only show 10 most recent commits
alias gg='git log --oneline --graph --all -n 10'
# "git add"
alias ga='git add'
# "git commit"
#   `-m`: message (follow with the commit message)
alias gc='git commit -m'

# default text editor
export EDITOR=vim
# enable vi editing commands in bash
set -o vi

# super cool prompt (see http://ezprompt.net/):
# eg: "user@host ~/path/to/you $ "
export PS1="\[\e[36m\]\u\[\e[m\]\[\e[31m\]@\[\e[m\]\[\e[35m\]\h\[\e[m\] \[\e[32m\]\w\[\e[m\] \[\e[31m\]$\[\e[m\] "
'''.format(header=createHeader('#'))


'''
Actually Do Stuff
'''

# setup git config
email = getUserValue(
    'email (for gitconfig): ',
    lambda em: 'email = "{}" (y/n)? '.format(em),
)
try:
    subprocess.call('git config user.email {}'.format(email), shell=True)
    subprocess.call('git config user.name "Monte Mishkin"', shell=True)
except Exception as ex:
    print('problem with git:')
    raise ex

# append to user's files to source config files
appendStringToFile(toUserBashrc, USER_BASHRC)
appendStringToFile(toUserVimrc, USER_VIMRC)
# create config dir
try:
    os.mkdir(CONFIG_DIR)
    print('created config dir at {}'.format(CONFIG_DIR))
except OSError as ex:
    print('config dir already exists at {}'.format(CONFIG_DIR))
# write to config files
overwriteStringToFile(toConfigReadme, CONFIG_README)
overwriteStringToFile(toConfigBashrc, CONFIG_BASHRC)
overwriteStringToFile(toConfigVimrc, CONFIG_VIMRC)
